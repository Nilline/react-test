{"version":3,"sources":["components/error/error.gif","components/error/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_apiBabe","_apiKey","_baseOffset","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","comics","thumbnail","path","extension","title","price","prices","description","pageCount","language","textObjects","char","name","slice","homepage","urls","wiki","items","SingleComicPage","comic","setComic","comicId","useParams","useLocation","useEffect","onRequest","then","onComicsLoaded","Comic","className","spinner","errorMessage","content","to"],"mappings":"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","file":"static/js/5.4be912b0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='error'/>\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\tconst _apiBabe = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=744a96d18fccecddd408e2d153c70566';\r\n\tconst _baseOffset = 210;\r\n\r\n\tconst {loading, error, request, clearError} = useHttp();\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBabe}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter)\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBabe}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBabe}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBabe}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tthumbnail: `${comics.thumbnail.path}.${comics.thumbnail.extension}`,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tprice: `${comics.prices[0].price ? comics.prices[0].price : 'NOT AVAILABLE'}`,\r\n\t\t\tid: comics.id,\r\n\t\t\tdescription: comics.description ? comics.description : 'There is no description for this comics',\r\n\t\t\tpageCount: comics.pageCount ? `${comics.pageCount} pages` : \"No information about the number of pages\",\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\"\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n\t\t\tthumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tid: char.id,\r\n\t\t\tcomics: char.comics.items,\r\n\t\t}\r\n\t}\r\n\r\n\treturn {loading, error, clearError, getCharacter, getAllCharacters, getAllComics, getComic};\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(false);\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n\t\tsetLoading(true);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\tsetLoading(false);\r\n\t\t\treturn data;\r\n\t\t} catch(e) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetError(e);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => setError(null), []);\r\n\r\n\treturn {loading, error, request, clearError};\r\n}","import { useState, useEffect } from 'react';\nimport { Link, useParams, useLocation } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../error/ErrorMessage';\n\nimport './singleComicPage.scss';\n\nconst SingleComicPage = () => {\n\tconst [comic, setComic] = useState({});\n\tconst { comicId } = useParams();\n\n\tconst {loading, error, clearError, getComic} = useMarvelService();\n\n\tconst location = useLocation();\n\n\tuseEffect(() => {\n\t\tonRequest(comicId);\n\t}, [comicId])\n\n\tconst onRequest = (id) => {\n\t\tclearError();\n\n\t\tgetComic(id)\n\t\t\t.then(onComicsLoaded);\n\t}\n\n\tconst onComicsLoaded = (comics) => {\n\t\tsetComic(comics);\n\t}\n\n\tconst Comic = () => {\n\t\tconst {thumbnail, title, description, pageCount, language, price} = comic;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<img src={thumbnail} alt=\"x-men\" className=\"single-comic__img\"/>\n            <div className=\"single-comic__info\">\n                <h2 className=\"single-comic__name\">{title}</h2>\n                <p className=\"single-comic__descr\">{description}</p>\n                <p className=\"single-comic__descr\">{pageCount}</p>\n                <p className=\"single-comic__descr\">{`Language: ${language}`}</p>\n                <div className=\"single-comic__price\">{`${price}$`}</div>\n            </div>\n\t\t\t</>\n\t\t)\n\t}\n\n\tconst spinner = loading ? <Spinner/> : null;\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst content = !(loading || error || !comic) ? <Comic/> : null;\n\n    return (\n        <div className=\"single-comic\">\n\t\t\t\t{spinner}\n\t\t\t\t{errorMessage}\n\t\t\t\t{content}\n            <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\n        </div>\n    )\n}\n\nexport default SingleComicPage;"],"sourceRoot":""}